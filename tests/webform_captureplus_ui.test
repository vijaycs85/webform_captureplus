<?php

/**
 * @file
 * Contains Webform Capture+ UI tests.
 */

/**
 * Class ActionsConfigurationTestCase
 */
class WebformCapturePlusAdminUITestCase extends WebformTestCase {
  protected $modules = array('webform', 'webform_captureplus');
  public static function getInfo() {
    return array(
      'name' => 'Webform Capture+ Admin UI',
      'description' => 'Tests webform capture+ global & node level configurations.',
      'group' => 'Webform',
    );
  }


  /**
   * Implements setUp().
   */
  function setUp($added_modules = array()) {
    parent::setUp(array_merge($added_modules, array('webform_captureplus', 'autoload')));
    // Create a webform admin that will do all node creation.
    $permissions = array(
      'access content',
      'administer nodes',
      'create webform content',
      'edit webform components',
      'edit any webform content',
      'access all webform results',
      'edit all webform submissions',
      'administer site configuration',
      'delete all webform submissions',
      'administer webform capture plus',
    );
    $user_key = 'admin';
    $this->webform_users[$user_key] = $this->drupalCreateUser($permissions);
    $profile = array('profile_gender' => 'Female');
    $this->webform_users[$user_key]->profile_gender = 'Female';
    profile_save_profile($profile, $this->webform_users[$user_key], 'Profile');

  }

  /**
   * Test the configuration of advanced actions through the administration
   * interface.
   */
  function testGlobalConfiguration() {
    $this->drupalLogin($this->webform_users['admin']);
    $this->drupalGet('admin/settings/webform');
    $this->assertText('Capture+ settings');


    $this->assertFieldByName('webform_captureplus_domain');
    $this->assertFieldByName('webform_captureplus_version');
    $this->assertFieldByName('webform_captureplus_max_group');
    $this->assertDefaultFields();
    $new_field = 'BuildingName';
    $this->assertNoFieldChecked('edit-webform-captureplus-allowed-fields-' . $new_field);

    $edit = array('webform_captureplus_allowed_fields[' . $new_field . ']' => TRUE);
    $this->drupalPost(NULL, $edit, t('Save configuration'));
    $this->assertText('The configuration options have been saved.');
    $this->assertDefaultFields();
    $this->assertFieldChecked('edit-webform-captureplus-allowed-fields-' . $new_field);
  }

  /**
   * Helper to assert default fields.
   */
  protected function assertDefaultFields() {
    $fields = array('City', 'Company', 'PostalCode', 'Line1', 'Line2', 'Id', 'Label');
    foreach ($fields as $field) {
      $this->assertFieldByName('webform_captureplus_allowed_fields[' . $field . ']');
      $this->assertFieldChecked('edit-webform-captureplus-allowed-fields-' . $field);
    }
  }

  /**
   * Test the configuration of advanced actions through the administration
   * interface.
   */
  function testComponentConfiguration() {
    $this->drupalLogin($this->webform_users['admin']);
    $this->webformReset();
    // Create a new Webform test node.
    $node = $this->testWebformForm();
    $this->drupalGet('node/' . $node->nid . '/webform/captureplus');
    $this->assertResponse(200);

    // Check for configuration elements.
    $this->assertFieldByName('settings[key]');
    $this->assertFieldByName('settings[set_cursor]');
    $this->assertFieldByName('settings[inline_message]');
    $this->assertFieldByName('settings[countries]');
    $this->assertFieldByName('settings[bar_visible]');
    $this->assertFieldByName('settings[culture]');
    $this->assertFieldByName('settings[list_width]');
    $this->assertFieldByName('settings[list_height]');
    $this->assertText('Notes');
  }

}
